SimplePackets

SimplePackets is an API that I designed for use in my own projects that I thought other people would find great use for.
It makes sending data over TCP Sockets a lot easier.

How to use:

First let's start with the server code

public class Server {
    public static void main(String[] args) throws Exception {
        /*First you must initialize the server. The first argument is the port number
        you'd like the server to use. The second argument is a ClientCallback object
        and you must override the onClientConnected method so you can add your code to
        handle any clients that connect to the server.*/
        SimpleServer simpleServer = new SimpleServer(23456, new ClientCallback() {
            @Override
            public void onClientConnected(Socket socket) {
                try {
                    //Information is sent through objects called DataPackets
                    DataPacket dataPacket = new DataPacket();
                    //Call getData(Socket socket) to receive the information
                    dataPacket.getData(socket);
                    //Use getString(String key) to get any strings that you added to the DataPacket
                    if (dataPacket.getString("command").equals("echo")) {
                        System.out.println(dataPacket.getString("message"))
                        DataPacket responsePacket = new DataPacket();
                        responsePacket.setString("response", "OK");
                        //To send data, call sendData(Socket socket)
                        responsePacket.sendData(socket);
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        });
        
        //Now you can start the server by calling run()
        simpleServer.run();
        
        //If you need to start the server in a seperate Thread then you can call start() instead
    }
}

Now for the client code

public class Client {
    public static void main(String[] args) {
        //Connect to the server by creating a socket and giving the arguments which are the address and the port number
        Socket socket = new Socket("localhost", 23456);
        DataPacket dataPacket = new DataPacket();
        //Add data to the DataPacket by giving a key and a value
        dataPacket.setString("command", "echo");
        dataPacket.setString("message", "Hello World!");
        dataPacket.sendData(socket);
        DataPacket responsePacket = new DataPacket();
        responsePacket.getData(socket);
        if (responsePacket.getString("response").equals("OK")) {
            System.out.println("Message sent successfully")
        } else {
            System.out.println("Message failed to send :(");
        }
    }
}

I will be adding more documentation in the future. To see more uses look in the Test class.
